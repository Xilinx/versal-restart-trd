#!/bin/bash
#
#*****************************************************************************
#
# Copyright (C) 2019 - 2021 Xilinx, Inc.  All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
#******************************************************************************
#
# Configure petalinux project for different board and ip addresses
#

_BOARD="vck190"
_MODULE="ebm-01"
_PLNX_PATH="."

_IP_ADDRESS=192.168.0.10
_IP_SUBNET_MASK=255.255.255.0
_IP_GATEWAY=192.168.0.1

_SUPPORTED_BOARD="vck190 vmk180"
_SUPPORTED_MODULE="ebm-01 ebm-02 ebm-03 none"

_CACHE_PATH="/scratch/cache/plnx/2021.2"
_do_cache=0

function print_help() {
	echo  "Usage:"
	echo  "  $0 [Options]"
	echo  "Options:"
	echo  "  -h, --help         Display this help and exit"
	echo  "  -b, --board <val>  Select the board from [$_SUPPORTED_BOARD]. Default = $_BOARD"
	echo  "  -m, --module <val> Select the module from [$_SUPPORTED_MODULE]. Default = $_MODULE"
	echo  "                     Use 'none' to use no module"
	echo  "  -i, --ip <val>     Provide the static ip for the board"
	echo  "                     Use 'dhcp' for dynamic ip"
	echo  "  -p, --plnx_root    Petalinux project's root directory"
	echo  "  -c, --cache        Use local download and sstate_cache"
}

function validate_ip()
{
    local  ip=$1
	# 0 = True and 1 = False
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
        _IP_GATEWAY=${ip[0]}.${ip[1]}.${ip[2]}.1
	elif [[ "$ip" == "dhcp" ]]; then
		stat=0
    fi
    return $stat
}

contains()
{
	local stat=1
	local item=$1
	local list=$2
	if [[ $list =~ (^|[[:space:]])"$item"($|[[:space:]]) ]] ; then
		# exists
		stat=0
	fi
	return $stat
}

function config_machine_name()
{
	local _name="versal-${_BOARD}-reva-x-${_MODULE}-reva"

	if [[ "${_MODULE}" == "none" ]]
	then
		_name="versal-${_BOARD}-reva"
	fi

	echo "Machine name: ${_name}"
	sed -i -E "s/^CONFIG_SUBSYSTEM_MACHINE_NAME=.*$/CONFIG_SUBSYSTEM_MACHINE_NAME=\"${_name}\"/" $_PLNX_PATH/project-spec/configs/config
}


# TODO: split the ip address if the gateway is not 192.168.x.x
function config_ip()
{
	if [[ "${_IP_ADDRESS}" == "dhcp" ]]; then
		echo "IP Address : Dynamic (dhcp)"

		sed -i -E "/^# Ethernet Settings.*$/,/^$/c\
			# Ethernet Settings\n\
#\n\
# CONFIG_SUBSYSTEM_ETHERNET_VERSAL_CIPS_0_PSPMC_0_PSV_ETHERNET_0_SELECT is not set\n\
# CONFIG_SUBSYSTEM_ETHERNET_VERSAL_CIPS_0_PSPMC_0_PSV_ETHERNET_1_SELECT is not set\n\
CONFIG_SUBSYSTEM_ETHERNET_MANUAL_SELECT=y\n\
" ${_PLNX_PATH}/project-spec/configs/config
	else
		echo "IP Address : ${_IP_ADDRESS} (static)"

		sed -i -E "/^# Ethernet Settings.*$/,/^$/c\
			# Ethernet Settings\n\
#\n\
CONFIG_SUBSYSTEM_ETHERNET_VERSAL_CIPS_0_PSPMC_0_PSV_ETHERNET_0_SELECT=y\n\
# CONFIG_SUBSYSTEM_ETHERNET_VERSAL_CIPS_0_PSPMC_0_PSV_ETHERNET_1_SELECT is not set\n\
# CONFIG_SUBSYSTEM_ETHERNET_MANUAL_SELECT is not set\n\
# CONFIG_SUBSYSTEM_ETHERNET_VERSAL_CIPS_0_PSPMC_0_PSV_ETHERNET_0_MAC_AUTO is not set\n\
CONFIG_SUBSYSTEM_ETHERNET_VERSAL_CIPS_0_PSPMC_0_PSV_ETHERNET_0_MAC="ff:ff:ff:ff:ff:ff"\n\
# CONFIG_SUBSYSTEM_ETHERNET_VERSAL_CIPS_0_PSPMC_0_PSV_ETHERNET_0_USE_DHCP is not set\n\
CONFIG_SUBSYSTEM_ETHERNET_VERSAL_CIPS_0_PSPMC_0_PSV_ETHERNET_0_IP_ADDRESS="${_IP_ADDRESS}"\n\
CONFIG_SUBSYSTEM_ETHERNET_VERSAL_CIPS_0_PSPMC_0_PSV_ETHERNET_0_IP_NETMASK="255.255.255.0"\n\
CONFIG_SUBSYSTEM_ETHERNET_VERSAL_CIPS_0_PSPMC_0_PSV_ETHERNET_0_IP_GATEWAY="${_IP_GATEWAY}"\n\
" ${_PLNX_PATH}/project-spec/configs/config
	fi

}


while [ "$1" != "" ]; do
	case $1 in
	-h | --help )
		print_help
		exit 0
		;;
	-b | --board )
		shift
		if ! contains "$1" "$_SUPPORTED_BOARD"
		then
			echo "Invalid BOARD:$$1"
			print_help
			exit 1
		fi
		_BOARD=$1
		;;
	-m | --module )
		shift
		if ! contains "$1" "$_SUPPORTED_MODULE"
		then
			echo "Invalid Module:$1"
			print_help
			exit 1
		fi
		_MODULE=$1
		;;
	-i | --ip )
		shift
		_IP_ADDRESS=$1
		if ! validate_ip $_IP_ADDRESS
		then
			echo "Invalid IP address:$_IP_ADDRESS"
			print_help
			exit 1
		fi
		;;
	-p | --plnx_path )
		shift
		if [ ! -f ${1}/project-spec/configs/config ]; then
			echo "Invalid petalinux root path. $1/project-spec/configs/config File not found!"
			print_help
			exit 1
		fi
		_PLNX_PATH=$1
		;;
	-c | --cache )
		_do_cache=1
		mkdir -p $_CACHE_PATH
		;;

	*)
		echo "invalid argument '$1'"
		print_help
		exit 1
		;;
	esac
	shift
done


if [ ! -f ${_PLNX_PATH}/project-spec/configs/config ]; then
	echo "Invalid petalinux root path. ${_PLNX_PATH}/project-spec/configs/config File not found!"
	print_help
	exit 1
fi

echo "Initialize Petalinux Configuration:"
echo "PLNX: $_PLNX_PATH"

if [ "$_do_cache" -eq "1" ] && [ -r $_CACHE_PATH ]; then
	echo "Using the local sstate and download";
	echo "DL_DIR = \"$_CACHE_PATH/downloads\"" >> ${_PLNX_PATH}/project-spec/meta-user/conf/petalinuxbsp.conf
	echo "SSTATE_DIR = \"$_CACHE_PATH/sstate/aarch64\"" >> ${_PLNX_PATH}/project-spec/meta-user/conf/petalinuxbsp.conf
fi

config_machine_name
config_ip

# Image packaging format should be initramfs
echo "CONFIG_SUBSYSTEM_INITRAMFS_IMAGE_NAME=\"petalinux-initramfs-image\"" >> ${_PLNX_PATH}/project-spec/configs/config

# unset in reverse order
